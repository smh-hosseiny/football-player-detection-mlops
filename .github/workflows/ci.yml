name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: '3.9'
  COVERAGE_THRESHOLD: 80

jobs:
  # Stage 1: Code Quality - Fail fast on style/type issues
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy

      - name: Run flake8
        run: |
          flake8 src/ api/ tests/ --max-line-length=100 --count --show-source --statistics

      - name: Run black check
        run: black --check --diff src/ api/ tests/

      - name: Run isort check
        run: isort --check-only --diff src/ api/ tests/

  # Stage 2: Unit & Integration Tests
  test:
    runs-on: ubuntu-latest
    needs: lint  # Only run if linting passes
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-test-${{ hashFiles('requirements-dev.txt', 'requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-test-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run tests with coverage
        run: |
          pytest tests/ -v \
            --cov=src \
            --cov=api \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-fail-under=${{ env.COVERAGE_THRESHOLD }}

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  # Stage 3: Model & API Integration Tests
  model-test:
    runs-on: ubuntu-latest
    needs: lint  # Depend on lint, run parallel with unit tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-model-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-model-

      - name: Install runtime dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .

      - name: Download test model
        run: |
          wget -q https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n.pt
          mkdir -p models
          mv yolov8n.pt models/test_model.pt

      - name: Test model inference
        run: |
          python -c "
          from ultralytics import YOLO
          import numpy as np
          import sys
          
          try:
              model = YOLO('models/test_model.pt')
              dummy_image = np.random.randint(0, 255, (640, 640, 3), dtype=np.uint8)
              results = model(dummy_image)
              assert len(results) > 0, 'No results from model inference'
              assert len(results[0].boxes) >= 0, 'Model should return valid results'
              print('✅ Model inference test passed')
              sys.exit(0)
          except Exception as e:
              print(f'❌ Model inference failed: {e}')
              sys.exit(1)
          "

      - name: Test API endpoints
        run: |
          # Install additional deps for API testing
          pip install uvicorn httpx
          
          # Start API server in background
          uvicorn api.main:app --host 0.0.0.0 --port 8000 --log-level warning &
          API_PID=$!
          
          # Wait for server to start
          sleep 10
          
          # Test health endpoint
          if ! curl -f -s http://localhost:8000/health; then
            echo "❌ Health check failed"
            kill $API_PID
            exit 1
          fi
          
          # Test model prediction endpoint (if exists)
          if curl -f -s http://localhost:8000/docs >/dev/null 2>&1; then
            echo "✅ API endpoints accessible"
          fi
          
          # Cleanup
          kill $API_PID || true
          wait $API_PID || true

  # Stage 4: Build & Package Validation
  build:
    runs-on: ubuntu-latest
    needs: [test, model-test]  # Only build if ALL tests pass
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile.inference
          tags: object-detector:ci-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false  # Don't push to registry in CI
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}

      - name: Validate package installation
        run: |
          # Test that package installs correctly
          python -m pip install --user .
          python -c "
          try:
              import your_package_name  # Replace with actual package name
              print('✅ Package installs and imports correctly')
          except ImportError as e:
              print(f'❌ Package installation failed: {e}')
              exit(1)
          "


  # Final stage: Deploy gates (only on main branch)
  deploy-check:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: All checks passed
        run: echo "✅ CI pipeline completed successfully. Ready for deployment."
